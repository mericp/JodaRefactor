Defines the calculation engine for date and time fields.
The interface defines a set of methods that manipulate a millisecond misc.datetime
with regards to a single misc.field, such as monthOfYear or secondOfMinute.
<p>
This design is extensible so, if you wish, you can extract a different misc.field from
the milliseconds. A number of standard implementations are provided to assist.

 public abstract String getName():
 Get the name of the misc.field.
<p>
By convention, names follow a pattern of "dddOfRrr", where "ddd" represents
the (singular) misc.duration unit misc.field name and "Rrr" represents the (singular)
misc.duration range misc.field name. If the range misc.field is not applicable, then
the name of the misc.field is simply the (singular) misc.duration misc.field name.
      *
@return misc.field name

       public abstract boolean isLenient():
       Returns true if the set method is lenient. If so, it accepts values that
      are out of bounds. For example, a lenient day of month misc.field accepts 32
      for January, converting it to February 1.
            *
      @return true if this misc.field is lenient

public abstract int get(long misc.instant):
Get the value of this misc.field from the milliseconds.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to query
@return the value of the misc.field, in the units of the misc.field

public abstract String getAsText(long misc.instant, Locale locale):
Get the human-readable, text value of this misc.field from the milliseconds.
If the specified locale is null, the default locale is used.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to query
@param locale the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract String getAsText(long misc.instant):
Get the human-readable, text value of this misc.field from the milliseconds.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to query
@return the text value of the misc.field

public abstract String getAsText(ReadablePartial misc.partial, int fieldValue, Locale locale):
Get the human-readable, text value of this misc.field from a misc.partial misc.instant.
If the specified locale is null, the default locale is used.
     *
@param misc.partial  the misc.partial misc.instant to query
@param fieldValue  the misc.field value of this misc.field, provided for performance
@param locale  the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract String getAsText(ReadablePartial misc.partial, Locale locale):
Get the human-readable, text value of this misc.field from a misc.partial misc.instant.
If the specified locale is null, the default locale is used.
     *
@param misc.partial  the misc.partial misc.instant to query
@param locale  the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract String getAsText(int fieldValue, Locale locale):
Get the human-readable, text value of this misc.field from the misc.field value.
If the specified locale is null, the default locale is used.
     *
@param fieldValue  the numeric value to convert to text
@param locale the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract String getAsShortText(long misc.instant, Locale locale):
Get the human-readable, short text value of this misc.field from the
milliseconds.  If the specified locale is null, the default locale is used.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to query
@param locale the locale to use for selecting a text symbol, null for default
@return the short text value of the misc.field

public abstract String getAsShortText(long misc.instant):
Get the human-readable, short text value of this misc.field from the
milliseconds.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to query
@return the short text value of the misc.field

public abstract String getAsShortText(ReadablePartial misc.partial, int fieldValue, Locale locale):
Get the human-readable, short text value of this misc.field from a misc.partial misc.instant.
If the specified locale is null, the default locale is used.
     *
@param misc.partial  the misc.partial misc.instant to query
@param fieldValue  the misc.field value of this misc.field, provided for performance
@param locale  the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract String getAsShortText(ReadablePartial misc.partial, Locale locale):
Get the human-readable, short text value of this misc.field from a misc.partial misc.instant.
If the specified locale is null, the default locale is used.
     *
@param misc.partial  the misc.partial misc.instant to query
@param locale  the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract String getAsShortText(int fieldValue, Locale locale):
Get the human-readable, short text value of this misc.field from the misc.field value.
If the specified locale is null, the default locale is used.
     *
@param fieldValue  the numeric value to convert to text
@param locale the locale to use for selecting a text symbol, null for default
@return the text value of the misc.field

public abstract long add(long misc.instant, int value):
Adds a value (which may be negative) to the millis value,
overflowing into larger fields if necessary.
<p>
The value will be added to this misc.field. If the value is too large to be
added solely to this misc.field, larger fields will increase as required.
Smaller fields should be unaffected, except where the result would be
an invalid value for a smaller misc.field. In this case the smaller misc.field is
adjusted to be in range.
<p>
For example, in the ISO misc.chronology:<br>
2000-08-20 add six months is 2001-02-20<br>
2000-08-20 add twenty months is 2002-04-20<br>
2000-08-20 add minus nine months is 1999-11-20<br>
2001-01-31 add one month  is 2001-02-28<br>
2001-01-31 add two months is 2001-03-31<br>
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to add to
@param value  the value to add, in the units of the misc.field
@return the updated milliseconds

public abstract long add(long misc.instant, long value):
Adds a value (which may be negative) to the millis value,
overflowing into larger fields if necessary.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to add to
@param value  the long value to add, in the units of the misc.field
@return the updated milliseconds
@throws IllegalArgumentException if value is too large
@see #add(long,int)

public abstract int[] add(ReadablePartial misc.instant, int fieldIndex, int[] values, int valueToAdd):
Adds a value (which may be negative) to the misc.partial misc.instant,
throwing an exception if the maximum size of the misc.instant is reached.
<p>
The value will be added to this misc.field, overflowing into larger fields
if necessary. Smaller fields should be unaffected, except where the
result would be an invalid value for a smaller misc.field. In this case the
smaller misc.field is adjusted to be in range.
<p>
Partial instants only contain some fields. This may result in a maximum
possible value, such as TimeOfDay being limited to 23:59:59:999. If this
limit is breached by the add an exception is thrown.
<p>
For example, in the ISO misc.chronology:<br>
2000-08-20 add six months is 2000-02-20<br>
2000-08-20 add twenty months is 2000-04-20<br>
2000-08-20 add minus nine months is 2000-11-20<br>
2001-01-31 add one month  is 2001-02-28<br>
2001-01-31 add two months is 2001-03-31<br>
     *
@param misc.instant  the misc.partial misc.instant
@param fieldIndex  the index of this misc.field in the misc.instant
@param values  the values of the misc.partial misc.instant which should be updated
@param valueToAdd  the value to add, in the units of the misc.field
@return the passed in values
@throws IllegalArgumentException if the value is invalid or the maximum misc.instant is reached

public abstract int[] addWrapPartial(ReadablePartial misc.instant, int fieldIndex, int[] values, int valueToAdd):
Adds a value (which may be negative) to the misc.partial misc.instant,
wrapping the whole misc.partial if the maximum size of the misc.partial is reached.
<p>
The value will be added to this misc.field, overflowing into larger fields
if necessary. Smaller fields should be unaffected, except where the
result would be an invalid value for a smaller misc.field. In this case the
smaller misc.field is adjusted to be in range.
<p>
Partial instants only contain some fields. This may result in a maximum
possible value, such as TimeOfDay normally being limited to 23:59:59:999.
If ths limit is reached by the addition, this method will wrap back to
00:00:00.000. In fact, you would generally only use this method for
classes that have a limitation such as this.
<p>
For example, in the ISO misc.chronology:<br>
10:20:30 add 20 minutes is 10:40:30<br>
10:20:30 add 45 minutes is 11:05:30<br>
10:20:30 add 16 hours is 02:20:30<br>
     *
@param misc.instant  the misc.partial misc.instant
@param fieldIndex  the index of this misc.field in the misc.partial
@param values  the values of the misc.partial misc.instant which should be updated
@param valueToAdd  the value to add, in the units of the misc.field
@return the passed in values
@throws IllegalArgumentException if the value is invalid or the maximum misc.instant is reached

public abstract long addWrapField(long misc.instant, int value):
Adds a value (which may be negative) to the millis value,
wrapping within this misc.field.
<p>
The value will be added to this misc.field. If the value is too large to be
added solely to this misc.field then it wraps. Larger fields are always
unaffected. Smaller fields should be unaffected, except where the
result would be an invalid value for a smaller misc.field. In this case the
smaller misc.field is adjusted to be in range.
<p>
For example, in the ISO misc.chronology:<br>
2000-08-20 addWrapField six months is 2000-02-20<br>
2000-08-20 addWrapField twenty months is 2000-04-20<br>
2000-08-20 addWrapField minus nine months is 2000-11-20<br>
2001-01-31 addWrapField one month  is 2001-02-28<br>
2001-01-31 addWrapField two months is 2001-03-31<br>
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to add to
@param value  the value to add, in the units of the misc.field
@return the updated milliseconds

public abstract int[] addWrapField(ReadablePartial misc.instant, int fieldIndex, int[] values, int valueToAdd):
Adds a value (which may be negative) to the misc.partial misc.instant,
wrapping within this misc.field.
<p>
The value will be added to this misc.field. If the value is too large to be
added solely to this misc.field then it wraps. Larger fields are always
unaffected. Smaller fields should be unaffected, except where the
result would be an invalid value for a smaller misc.field. In this case the
smaller misc.field is adjusted to be in range.
<p>
For example, in the ISO misc.chronology:<br>
2000-08-20 addWrapField six months is 2000-02-20<br>
2000-08-20 addWrapField twenty months is 2000-04-20<br>
2000-08-20 addWrapField minus nine months is 2000-11-20<br>
2001-01-31 addWrapField one month  is 2001-02-28<br>
2001-01-31 addWrapField two months is 2001-03-31<br>
     *
@param misc.instant  the misc.partial misc.instant
@param fieldIndex  the index of this misc.field in the misc.instant
@param values  the values of the misc.partial misc.instant which should be updated
@param valueToAdd  the value to add, in the units of the misc.field
@return the passed in values
@throws IllegalArgumentException if the value is invalid

public abstract int getDifference(long minuendInstant, long subtrahendInstant):
Computes the difference between two instants, as measured in the units
of this misc.field. Any fractional units are dropped from the result. Calling
getDifference reverses the effect of calling add. In the following code:
     *
<pre>
long misc.instant = ...
int v = ...
int age = getDifference(add(misc.instant, v), misc.instant);
</pre>
     *
The value 'age' is the same as the value 'v'.
     *
@param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
subtract from
@param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
subtract off the minuend
@return the difference in the units of this misc.field

public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant):
Computes the difference between two instants, as measured in the units
of this misc.field. Any fractional units are dropped from the result. Calling
getDifference reverses the effect of calling add. In the following code:
     *
<pre>
long misc.instant = ...
long v = ...
long age = getDifferenceAsLong(add(misc.instant, v), misc.instant);
</pre>
     *
The value 'age' is the same as the value 'v'.
     *
@param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
subtract from
@param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
subtract off the minuend
@return the difference in the units of this misc.field

public abstract long set(long misc.instant, int value):
Sets a value in the milliseconds supplied.
<p>
The value of this misc.field will be set.
If the value is invalid, an exception if thrown.
<p>
If setting this misc.field would make other fields invalid, then those fields
may be changed. For example if the current date is the 31st January, and
the month is set to February, the day would be invalid. Instead, the day
would be changed to the closest value - the 28th/29th February as appropriate.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to set in
@param value  the value to set, in the units of the misc.field
@return the updated milliseconds
@throws IllegalArgumentException if the value is invalid

public abstract int[] set(ReadablePartial misc.instant, int fieldIndex, int[] values, int newValue):
Sets a value using the specified misc.partial misc.instant.
<p>
The value of this misc.field (specified by the index) will be set.
If the value is invalid, an exception if thrown.
<p>
If setting this misc.field would make other fields invalid, then those fields
may be changed. For example if the current date is the 31st January, and
the month is set to February, the day would be invalid. Instead, the day
would be changed to the closest value - the 28th/29th February as appropriate.
     *
@param misc.instant  the misc.partial misc.instant
@param fieldIndex  the index of this misc.field in the misc.instant
@param values  the values of the misc.partial misc.instant which should be updated
@param newValue  the value to set, in the units of the misc.field
@return the passed in values
@throws IllegalArgumentException if the value is invalid

public abstract long set(long misc.instant, String text, Locale locale):
Sets a value in the milliseconds supplied from a human-readable, text value.
If the specified locale is null, the default locale is used.
<p>
If setting this misc.field would make other fields invalid, then those fields
may be changed. For example if the current date is the 31st January, and
the month is set to February, the day would be invalid. Instead, the day
would be changed to the closest value - the 28th/29th February as appropriate.
     *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to set in
@param text  the text value to set
@param locale the locale to use for selecting a text symbol, null for default
@return the updated milliseconds
@throws IllegalArgumentException if the text value is invalid

 public abstract long set(long misc.instant, String text):
 Sets a value in the milliseconds supplied from a human-readable, text value.
<p>
If setting this misc.field would make other fields invalid, then those fields
may be changed. For example if the current date is the 31st January, and
the month is set to February, the day would be invalid. Instead, the day
would be changed to the closest value - the 28th/29th February as appropriate.
      *
@param misc.instant  the milliseconds from 1970-01-01T00:00:00Z to set in
@param text  the text value to set
@return the updated milliseconds
@throws IllegalArgumentException if the text value is invalid

public abstract int[] set(ReadablePartial misc.instant, int fieldIndex, int[] values, String text, Locale locale):
Sets a value in the milliseconds supplied from a human-readable, text value.
If the specified locale is null, the default locale is used.
<p>
If setting this misc.field would make other fields invalid, then those fields
may be changed. For example if the current date is the 31st January, and
the month is set to February, the day would be invalid. Instead, the day
would be changed to the closest value - the 28th/29th February as appropriate.
     *
@param misc.instant  the misc.partial misc.instant
@param fieldIndex  the index of this misc.field in the misc.instant
@param values  the values of the misc.partial misc.instant which should be updated
@param text  the text value to set
@param locale the locale to use for selecting a text symbol, null for default
@return the passed in values
@throws IllegalArgumentException if the text value is invalid