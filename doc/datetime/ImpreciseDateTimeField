Abstract misc.datetime misc.field class that defines its own DurationField, which
 * delegates back into this ImpreciseDateTimeField.
 * <p>
 * This DateTimeField is useful for defining DateTimeFields that are composed
 * of imprecise durations. If both misc.duration fields are precise, then a
 * {@link PreciseDateTimeField} should be used instead.
 * <p>
 * When defining imprecise DateTimeFields where a matching DurationField is
 * already available, just extend BaseDateTimeField directly so as not to
 * create redundant DurationField instances.
 * <p>
 * ImpreciseDateTimeField is thread-safe and immutable, and its subclasses must
 * be as well.

 public int getDifference(long minuendInstant, long subtrahendInstant):
 Computes the difference between two instants, as measured in the units
      * of this misc.field. Any fractional units are dropped from the result. Calling
      * getDifference reverses the effect of calling add. In the following code:
      *
      * <pre>
      * long misc.instant = ...
      * int v = ...
      * int age = getDifference(add(misc.instant, v), misc.instant);
      * </pre>
      *
      * The value 'age' is the same as the value 'v'.
      * <p>
      * The default implementation call getDifferenceAsLong and converts the
      * return value to an int.
      *
      * @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
      * subtract from
      * @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
      * subtract off the minuend
      * @return the difference in the units of this misc.field

public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant):
Computes the difference between two instants, as measured in the units
     * of this misc.field. Any fractional units are dropped from the result. Calling
     * getDifference reverses the effect of calling add. In the following code:
     *
     * <pre>
     * long misc.instant = ...
     * long v = ...
     * long age = getDifferenceAsLong(add(misc.instant, v), misc.instant);
     * </pre>
     *
     * The value 'age' is the same as the value 'v'.
     * <p>
     * The default implementation performs a guess-and-check algorithm using
     * getDurationField().getUnitMillis() and the add() method. Subclasses are
     * encouraged to provide a more efficient implementation.
     *
     * @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
     * subtract from
     * @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
     * subtract off the minuend
     * @return the difference in the units of this misc.field