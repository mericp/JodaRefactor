DateTimeUtils provide public utility methods for the date-time library.
<p>
DateTimeUtils uses shared static variables which are declared as volatile
for thread-safety. These can be changed during the lifetime of the application
however doing so is generally a bad idea.

public static final long currentTimeMillis():
Gets the current time in milliseconds.
 <p>
 By default this returns <code>System.currentTimeMillis()</code>.
 This may be changed using other methods in this class.

 @return the current time in milliseconds from 1970-01-01T00:00:00Z

public static final void setCurrentMillisSystem():
Resets the current time to return the system time.
 <p>
 This method changes the behaviour of {@link #currentTimeMillis()}.
 Whenever the current time is queried, {@link System#currentTimeMillis()} is used.

 @throws SecurityException if the application does not have sufficient security rights

public static final void setCurrentMillisFixed(long fixedMillis):
Sets the current time to return a fixed millisecond time.
 <p>
 This method changes the behaviour of {@link #currentTimeMillis()}.
 Whenever the current time is queried, the same millisecond time will be returned.

 @param fixedMillis  the fixed millisecond time to use
 @throws SecurityException if the application does not have sufficient security rights

public static final void setCurrentMillisOffset(long offsetMillis):
Sets the current time to return the system time plus an offset.
 <p>
 This method changes the behaviour of {@link #currentTimeMillis()}.
 Whenever the current time is queried, {@link System#currentTimeMillis()} is used
 and then offset by adding the millisecond value specified here.

 @param offsetMillis  the fixed millisecond time to use
 @throws SecurityException if the application does not have sufficient security rights

public static final void setCurrentMillisProvider(MillisProvider millisProvider):
Sets the provider of the current time to class specified.
 <p>
 This method changes the behaviour of {@link #currentTimeMillis()}.
 Whenever the current time is queried, the specified class will be called.

 @param millisProvider  the provider of the current time to use, not null
 @throws SecurityException if the application does not have sufficient security rights

private static void checkPermission():
Checks whether the provider may be changed using permission 'CurrentTime.setProvider'.

 @throws SecurityException if the provider may not be changed

public static final long getInstantMillis(ReadableInstant instant):
Gets the millisecond instant from the specified instant object handling null.
 <p>
 If the instant object is <code>null</code>, the {@link #currentTimeMillis()}
 will be returned. Otherwise, the millis from the object are returned.

 @param instant  the instant to examine, null means now
 @return the time in milliseconds from 1970-01-01T00:00:00Z

 public static final Chronology getInstantChronology(ReadableInstant instant):
 Gets the chronology from the specified instant object handling null.
  <p>
  If the instant object is <code>null</code>, or the instant's chronology is
  <code>null</code>, {@link ISOChronology#getInstance()} will be returned.
  Otherwise, the chronology from the object is returned.
 
  @param instant  the instant to examine, null means ISO in the default zone
  @return the chronology, never null

public static final Chronology getIntervalChronology(ReadableInstant start, ReadableInstant end):
Gets the chronology from the specified instant based interval handling null.
 <p>
 The chronology is obtained from the start if that is not null, or from the
 end if the start is null. The result is additionally checked, and if still
 null then {@link ISOChronology#getInstance()} will be returned.

 @param start  the instant to examine and use as the primary source of the chronology
 @param end  the instant to examine and use as the secondary source of the chronology
 @return the chronology, never null

public static final Chronology getIntervalChronology(ReadableInterval interval):
Gets the chronology from the specified interval object handling null.
 <p>
 If the interval object is <code>null</code>, or the interval's chronology is
 <code>null</code>, {@link ISOChronology#getInstance()} will be returned.
 Otherwise, the chronology from the object is returned.

 @param interval  the interval to examine, null means ISO in the default zone
 @return the chronology, never null

public static final ReadableInterval getReadableInterval(ReadableInterval interval):
Gets the interval handling null.
 <p>
 If the interval is <code>null</code>, an interval representing now
 to now in the {@link ISOChronology#getInstance() ISOChronology}
 will be returned. Otherwise, the interval specified is returned.

 @param interval  the interval to use, null means now to now
 @return the interval, never null

public static final Chronology getChronology(Chronology chrono):
Gets the chronology handling null.
 <p>
 If the chronology is <code>null</code>, {@link ISOChronology#getInstance()}
 will be returned. Otherwise, the chronology is returned.

 @param chrono  the chronology to use, null means ISO in the default zone
 @return the chronology, never null

public static final DateTimeZone getZone(DateTimeZone zone):
Gets the zone handling null.
 <p>
 If the zone is <code>null</code>, {@link DateTimeZone#getDefault()}
 will be returned. Otherwise, the zone specified is returned.

 @param zone  the time zone to use, null means the default zone
 @return the time zone, never null

public static final PeriodType getPeriodType(PeriodType type):
Gets the period type handling null.
 <p>
 If the zone is <code>null</code>, {@link PeriodType#standard()}
 will be returned. Otherwise, the type specified is returned.

 @param type  the time zone to use, null means the standard type
 @return the type to use, never null

public static final long getDurationMillis(ReadableDuration duration):
Gets the millisecond duration from the specified duration object handling null.
 <p>
 If the duration object is <code>null</code>, zero will be returned.
 Otherwise, the millis from the object are returned.

 @param duration  the duration to examine, null means zero
 @return the duration in milliseconds

public static final boolean isContiguous(ReadablePartial partial):
 Checks whether the partial is contiguous.
 <p>
 A partial is contiguous if one field starts where another ends.
 <p>
 For example <code>LocalDate</code> is contiguous because DayOfMonth has
 the same range (Month) as the unit of the next field (MonthOfYear), and
 MonthOfYear has the same range (Year) as the unit of the next field (Year).
 <p>
 Similarly, <code>LocalTime</code> is contiguous, as it consists of
 MillisOfSecond, SecondOfMinute, MinuteOfHour and HourOfDay (note how
 the names of each field 'join up').
 <p>
 However, a Year/HourOfDay partial is not contiguous because the range
 field Day is not equal to the next field Year.
 Similarly, a DayOfWeek/DayOfMonth partial is not contiguous because
 the range Month is not equal to the next field Day.

 @param partial  the partial to check
 @return true if the partial is contiguous
 @throws IllegalArgumentException if the partial is null

public static final DateFormatSymbols getDateFormatSymbols(Locale locale):
Gets the {@link DateFormatSymbols} based on the given locale.
 <p>
 If JDK 6 or newer is being used, DateFormatSymbols.retrieve(locale) will
 be used in order to allow the use of locales defined as extensions.
 Otherwise, new DateFormatSymbols(locale) will be used.
 See JDK 6 {@link DateFormatSymbols} for further information.

 @param locale  the {@link Locale} used to get the correct {@link DateFormatSymbols}
 @return the symbols

public static final Map<String, DateTimeZone> getDefaultTimeZoneNames():
Gets the default map of time zone names.
 <p>
 This can be changed by {@link #setDefaultTimeZoneNames}.
 <p>
 The default set of short time zone names is as follows:
 <ul>
 <li>UT - UTC
 <li>UTC - UTC
 <li>GMT - UTC
 <li>EST - America/New_York
 <li>EDT - America/New_York
 <li>CST - America/Chicago
 <li>CDT - America/Chicago
 <li>MST - America/Denver
 <li>MDT - America/Denver
 <li>PST - America/Los_Angeles
 <li>PDT - America/Los_Angeles
 </ul>

 @return the unmodifiable map of abbreviations to zones, not null

public static final void setDefaultTimeZoneNames(Map<String, DateTimeZone> names) :
Sets the default map of time zone names.
 <p>
 The map is copied before storage.

 @param names  the map of abbreviations to zones, not null

public static final double toJulianDay(long epochMillis):
Calculates the astronomical Julian Day for an instant.
 <p>
 The <a href="http://en.wikipedia.org/wiki/Julian_day">Julian day</a> is a well-known
 system of time measurement for scientific use by the astronomy community.
 It expresses the interval of time in days and fractions of a day since
 January 1, 4713 BC (Julian) Greenwich noon.
 <p>
 Each day starts at midday (not midnight) and time is expressed as a fraction.
 Thus the fraction 0.25 is 18:00. equal to one quarter of the day from midday to midday.
 <p>
 Note that this method has nothing to do with the day-of-year.

 @param epochMillis  the epoch millis from 1970-01-01Z
 @return the astronomical Julian Day represented by the specified instant
useful links
        // http://en.wikipedia.org/wiki/Julian_day#cite_note-13 - Wikipedia
        // http://aa.usno.navy.mil/data/docs/JulianDate.php" - USNO
        // http://users.zoominternet.net/~matto/Java/Julian%20Date%20Converter.htm - Julian Date Converter by Matt Oltersdorf
        // http://ssd.jpl.nasa.gov/tc.cgi#top - CalTech

public static final long toJulianDayNumber(long epochMillis):
Calculates the astronomical Julian Day Number for an instant.
 <p>
 The {@link #toJulianDay(long)} method calculates the astronomical Julian Day
 with a fraction based on days starting at midday.
 This method calculates the variant where days start at midnight.
 JDN 0 is used for the date equivalent to Monday January 1, 4713 BC (Julian).
 Thus these days start 12 hours before those of the fractional Julian Day.
 <p>
 Note that this method has nothing to do with the day-of-year.

 @param epochMillis  the epoch millis from 1970-01-01Z
 @return the astronomical Julian Day represented by the specified instant

 public static final long fromJulianDay(double julianDay):
 Creates a date-time from a Julian Day.
  <p>
  Returns the {@code DateTime} object equal to the specified Julian Day.
 
  @param julianDay  the Julian Day
  @return the epoch millis from 1970-01-01Z