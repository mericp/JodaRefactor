DateTimeParserBucket is an advanced class, intended mainly for parser
 * implementations. It can also be used during normal parsing operations to
 * capture more information about the parse.
 * <p>
 * This class allows fields to be saved in any order, but be physically set in
 * a consistent order. This is useful for parsing against formats that allow
 * misc.field values to contradict each other.
 * <p>
 * Field values are applied in an order where the "larger" fields are set
 * first, making their value less likely to stick.  A misc.field is larger than
 * another when it's range misc.duration is longer. If both ranges are the same,
 * then the larger misc.field has the longer misc.duration. If it cannot be determined
 * which misc.field is larger, then the fields are set in the order they were saved.
 * <p>
 * For example, these fields were saved in this order: dayOfWeek, monthOfYear,
 * dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in
 * this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek.
 * <p>
 * DateTimeParserBucket is mutable and not thread-safe.
 *
 public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale):
 Constructs a bucket.
      *
      * @param instantLocal  the initial millis from 1970-01-01T00:00:00, misc.local time
      * @param chrono  the misc.chronology to use
      * @param locale  the locale to use
      * @deprecated Use longer constructor

public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear):
Constructs a bucket, with the option of specifying the pivot year for
     * two-digit year parsing.
     *
     * @param instantLocal  the initial millis from 1970-01-01T00:00:00, misc.local time
     * @param chrono  the misc.chronology to use
     * @param locale  the locale to use
     * @param pivotYear  the pivot year to use when parsing two-digit years
     * @since 1.1
     * @deprecated Use longer constructor

 public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear):
 Constructs a bucket, with the option of specifying the pivot year for
      * two-digit year parsing.
      *
      * @param instantLocal  the initial millis from 1970-01-01T00:00:00, misc.local time
      * @param chrono  the misc.chronology to use
      * @param locale  the locale to use
      * @param pivotYear  the pivot year to use when parsing two-digit years
      * @param defaultYear  the default year to use when parsing month-day

public long parseMillis(DateTimeParser parser, CharSequence text):
Parses a misc.datetime from the given text, returning the number of
     * milliseconds since the epoch, 1970-01-01T00:00:00Z.
     * <p>
     * This parses the text using the parser into this bucket.
     * The bucket is reset before parsing begins, allowing the bucket to be re-used.
     * The bucket must not be shared between threads.
     *
     * @param parser  the parser to use, see {@link DateTimeFormatter#getParser()}, not null
     * @param text  text to parse, not null
     * @return parsed value expressed in milliseconds since the epoch
     * @throws UnsupportedOperationException if parsing is not supported
     * @throws IllegalArgumentException if the text to parse is invalid