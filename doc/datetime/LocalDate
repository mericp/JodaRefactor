LocalDate is an immutable misc.datetime class representing a date
 * without a time zone.
 * <p>
 * LocalDate implements the {@link ReadablePartial} interface.
 * To do this, the interface methods focus on the key fields -
 * Year, MonthOfYear and DayOfMonth.
 * However, <b>all</b> date fields may in fact be queried.
 * <p>
 * LocalDate differs from DateMidnight in that this class does not
 * have a time zone and does not represent a single misc.instant in time.
 * <p>
 * Calculations on LocalDate are performed using a {@link misc.chronology}.
 * This misc.chronology will be set internally to be in the UTC time zone
 * for all calculations.
 *
 * <p>Each individual misc.field can be queried in two ways:
 * <ul>
 * <li><code>getMonthOfYear()</code>
 * <li><code>monthOfYear().get()</code>
 * </ul>
 * The second technique also provides access to other useful methods on the
 * misc.field:
 * <ul>
 * <li>numeric value
 * <li>text value
 * <li>short text value
 * <li>maximum/minimum values
 * <li>add/subtract
 * <li>set
 * <li>rounding
 * </ul>
 *
 * <p>
 * LocalDate is thread-safe and immutable, provided that the Chronology is as well.
 * All standard Chronology classes supplied are thread-safe and immutable.

 public static LocalDate now():
 Obtains a {@code LocalDate} set to the current system millisecond time
      * using <code>ISOChronology</code> in the default time zone.
      *
      * @return the current date-time, not null

public static LocalDate now(DateTimeZone zone):
Obtains a {@code LocalDate} set to the current system millisecond time
     * using <code>ISOChronology</code> in the specified time zone.
     *
     * @param zone  the time zone, not null
     * @return the current date-time, not null

public static LocalDate now(Chronology misc.chronology):
Obtains a {@code LocalDate} set to the current system millisecond time
     * using the specified misc.chronology.
     *
     * @param misc.chronology  the misc.chronology, not null
     * @return the current date-time, not null

public static LocalDate parse(String str):
Parses a {@code LocalDate} from the specified string.
     * <p>
     * This uses {@link ISODateTimeFormat#localDateParser()}.
     *
     * @param str  the string to parse, not null

public static LocalDate parse(String str, DateTimeFormatter formatter):
Parses a {@code LocalDate} from the specified string using a formatter.
     *
     * @param str  the string to parse, not null
     * @param formatter  the formatter to use, not null

public static LocalDate fromCalendarFields(Calendar calendar):
Constructs a LocalDate from a <code>java.util.Calendar</code>
     * using exactly the same misc.field values.
     * <p>
     * Each misc.field is queried from the Calendar and assigned to the LocalDate.
     * This is useful if you have been using the Calendar as a misc.local date,
     * ignoring the zone.
     * <p>
     * One advantage of this method is that this method is unaffected if the
     * version of the time zone data differs between the JDK and Joda-Time.
     * That is because the misc.local misc.field values are transferred, calculated using
     * the JDK time zone data and without using the Joda-Time time zone data.
     * <p>
     * This factory method ignores the type of the calendar and always
     * creates a LocalDate with ISO misc.chronology. It is expected that you
     * will only pass in instances of <code>GregorianCalendar</code> however
     * this is not validated.
     *
     * @param calendar  the Calendar to extract fields from, not null
     * @return the created misc.local date, not null
     * @throws IllegalArgumentException if the calendar is null
     * @throws IllegalArgumentException if the date is invalid for the ISO misc.chronology

 public static LocalDate fromDateFields(Date date):
 Constructs a LocalDate from a <code>java.util.Date</code>
      * using exactly the same misc.field values.
      * <p>
      * Each misc.field is queried from the Date and assigned to the LocalDate.
      * This is useful if you have been using the Date as a misc.local date,
      * ignoring the zone.
      * <p>
      * One advantage of this method is that this method is unaffected if the
      * version of the time zone data differs between the JDK and Joda-Time.
      * That is because the misc.local misc.field values are transferred, calculated using
      * the JDK time zone data and without using the Joda-Time time zone data.
      * <p>
      * This factory method always creates a LocalDate with ISO misc.chronology.
      *
      * @param date  the Date to extract fields from, not null
      * @return the created misc.local date, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO misc.chronology

public LocalDate():
Constructs an instance set to the current misc.local time evaluated using
     * ISO misc.chronology in the default zone.
     * <p>
     * Once the constructor is completed, the zone is no longer used.
     *
     * @see #now()

public LocalDate(DateTimeZone zone):
Constructs an instance set to the current misc.local time evaluated using
     * ISO misc.chronology in the specified zone.
     * <p>
     * If the specified time zone is null, the default zone is used.
     * Once the constructor is completed, the zone is no longer used.
     *
     * @param zone  the time zone, null means default zone
     * @see #now(DateTimeZone)

public LocalDate(Chronology misc.chronology):
Constructs an instance set to the current misc.local time evaluated using
     * specified misc.chronology.
     * <p>
     * If the misc.chronology is null, ISO misc.chronology in the default time zone is used.
     * Once the constructor is completed, the zone is no longer used.
     *
     * @param misc.chronology  the misc.chronology, null means ISOChronology in default zone
     * @see #now(Chronology)

public LocalDate(long misc.instant):
Constructs an instance set to the misc.local time defined by the specified
     * misc.instant evaluated using ISO misc.chronology in the default zone.
     * <p>
     * Once the constructor is completed, the zone is no longer used.
     *
     * @param misc.instant  the milliseconds from 1970-01-01T00:00:00Z

public LocalDate(long misc.instant, DateTimeZone zone):
Constructs an instance set to the misc.local time defined by the specified
     * misc.instant evaluated using ISO misc.chronology in the specified zone.
     * <p>
     * If the specified time zone is null, the default zone is used.
     * Once the constructor is completed, the zone is no longer used.
     *
     * @param misc.instant  the milliseconds from 1970-01-01T00:00:00Z
     * @param zone  the time zone, null means default zone

public LocalDate(long misc.instant, Chronology misc.chronology):
Constructs an instance set to the misc.local time defined by the specified
     * misc.instant evaluated using the specified misc.chronology.
     * <p>
     * If the misc.chronology is null, ISO misc.chronology in the default zone is used.
     * Once the constructor is completed, the zone is no longer used.
     *
     * @param misc.instant  the milliseconds from 1970-01-01T00:00:00Z
     * @param misc.chronology  the misc.chronology, null means ISOChronology in default zone

public LocalDate(Object misc.instant):
Constructs an instance from an Object that represents a misc.datetime.
     * The time zone will be retrieved from the object if possible,
     * otherwise the default time zone will be used.
     * <p>
     * If the object contains no misc.chronology, <code>ISOChronology</code> is used.
     * Once the constructor is completed, the zone is no longer used.
     * <p>
     * The recognised object types are defined in
     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
     * The default String converter ignores the zone and only parses the misc.field values.
     *
     * @param misc.instant  the misc.datetime object
     * @throws IllegalArgumentException if the misc.instant is invalid

public LocalDate(Object misc.instant, DateTimeZone zone):
Constructs an instance from an Object that represents a misc.datetime,
     * forcing the time zone to that specified.
     * <p>
     * If the object contains no misc.chronology, <code>ISOChronology</code> is used.
     * If the specified time zone is null, the default zone is used.
     * Once the constructor is completed, the zone is no longer used.
     * <p>
     * The recognised object types are defined in
     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
     * The default String converter ignores the zone and only parses the misc.field values.
     *
     * @param misc.instant  the misc.datetime object
     * @param zone  the time zone
     * @throws IllegalArgumentException if the misc.instant is invalid

public LocalDate(Object misc.instant, Chronology misc.chronology):
Constructs an instance from an Object that represents a misc.datetime,
     * using the specified misc.chronology.
     * <p>
     * If the misc.chronology is null, ISO in the default time zone is used.
     * Once the constructor is completed, the zone is no longer used.
     * If the misc.instant contains a misc.chronology, it will be ignored.
     * For example, passing a {@code LocalDate} and a different misc.chronology
     * will return a date with the year/month/day from the date applied
     * unaltered to the specified misc.chronology.
     * <p>
     * The recognised object types are defined in
     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
     * The default String converter ignores the zone and only parses the misc.field values.
     *
     * @param misc.instant  the misc.datetime object
     * @param misc.chronology  the misc.chronology
     * @throws IllegalArgumentException if the misc.instant is invalid

 public LocalDate(int year, int monthOfYear, int dayOfMonth):
 Constructs an instance set to the specified date and time
      * using <code>ISOChronology</code>.
      *
      * @param year  the year
      * @param monthOfYear  the month of the year, from 1 to 12
      * @param dayOfMonth  the day of the month, from 1 to 31
