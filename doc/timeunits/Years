An immutable time period representing a number of years.
<p>
<code>Years</code> is an immutable period that can only store years.
It does not store months, days or hours for example. As such it is a
type-safe way of representing a number of years in an application.
<p>
The number of years is set in the constructor, and may be queried using
<code>getYears()</code>. Basic mathematical operations are provided -
<code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
<code>dividedBy()</code>.
<p>
<code>Years</code> is thread-safe and immutable.

public static Years years(int years):
Obtains an instance of <code>Years</code> that may be cached.
<code>Years</code> is immutable, so instances can be cached and shared.
This factory method provides access to shared instances.
@param years  the number of years to obtain an instance for
@return the instance of Years

public static Years yearsBetween(ReadableInstant start, ReadableInstant end):
Creates a <code>Years</code> representing the number of whole years
between the two specified datetimes. This method corectly handles
any daylight savings time changes that may occur during the interval.
@param start  the start instant, must not be null
@param end  the end instant, must not be null
@return the period in years

public static Years yearsBetween(ReadablePartial start, ReadablePartial end):
Creates a <code>Years</code> representing the number of whole years
between the two specified partial datetimes.
<p>
The two partials must contain the same fields, for example you can specify
two <code>LocalDate</code> objects.
@param start  the start partial date, must not be null
@param end  the end partial date, must not be null
@return the period in years

public static Years yearsIn(ReadableInterval interval):
Creates a <code>Years</code> representing the number of whole years
in the specified interval. This method corectly handles any daylight
savings time changes that may occur during the interval.
@param interval  the interval to extract years from, null returns zero
@return the period in years

public static Years parseYears(String periodStr):
reates a new <code>Years</code> by parsing a string in the ISO8601 format 'PnY'.
 <p>
 The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
years component may be non-zero. If any other component is non-zero, an exception
will be thrown.
@param periodStr  the period string, null returns zero
@return the period in years

protected Years(int years):
Creates a new instance representing a number of years.
You should consider using the factory method {@link #years(int)}
instead of the constructor.
@param years  the number of years to represent

private Object readResolve():
Resolves singletons.
@return the singleton instance

public DurationFieldType getFieldType():
Gets the duration field type, which is <code>years</code>.
@return the period type

public PeriodType getPeriodType():
Gets the period type, which is <code>years</code>.
@return the period type

public int getYears():
Gets the number of years that this period represents.
@return the number of years in the period

public Years plus(int years):
Returns a new instance with the specified number of years added.
<p>
This instance is immutable and unaffected by this method call.
@param years  the amount of years to add, may be negative
@return the new period plus the specified number of years

public Years plus(Years years):
Returns a new instance with the specified number of years added.
<p>
This instance is immutable and unaffected by this method call.
@param years  the amount of years to add, may be negative, null means zero
@return the new period plus the specified number of years

public Years minus(int years):
Returns a new instance with the specified number of years taken away.
<p>
This instance is immutable and unaffected by this method call.
@param years  the amount of years to take away, may be negative
@return the new period minus the specified number of years

public Years minus(Years years):
Returns a new instance with the specified number of years taken away.
<p>
This instance is immutable and unaffected by this method call.
@param years  the amount of years to take away, may be negative, null means zero
@return the new period minus the specified number of years

public Years multipliedBy(int scalar):
Returns a new instance with the years multiplied by the specified scalar.
<p>
This instance is immutable and unaffected by this method call.
@param scalar  the amount to multiply by, may be negative
@return the new period multiplied by the specified scalar

public Years dividedBy(int divisor):
Returns a new instance with the years divided by the specified divisor.
The calculation uses integer division, thus 3 divided by 2 is 1.
<p>
This instance is immutable and unaffected by this method call.
@param divisor  the amount to divide by, may be negative
@return the new period divided by the specified divisor

public Years negated():
Returns a new instance with the years value negated.
@return the new period with a negated value

public boolean isGreaterThan(Years other):
Is this years instance greater than the specified number of years.
@param other  the other period, null means zero
@return true if this years instance is greater than the specified one

public boolean isLessThan(Years other):
Is this years instance less than the specified number of years.
@param other  the other period, null means zero

public String toString():
Gets this instance as a String in the ISO8601 duration format.
<p>
For example, "P4Y" represents 4 years.
@return the value as an ISO8601 string