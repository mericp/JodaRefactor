Defines the calculation engine for duration fields.
 * The interface defines a set of methods that manipulate a millisecond duration
 * with regards to a single field, such as months or seconds.
 * <p>
 * This design is extensible so, if you wish, you can extract a different field from
 * the millisecond duration. A number of standard implementations are provided to assist.

public abstract boolean isPrecise():
Is this field precise. A precise field can calculate its value from
milliseconds without needing a reference date. Put another way, a
precise field's unit size is not variable.
     *
@return true if precise
@see #getUnitMillis()

public abstract long getUnitMillis():
Returns the amount of milliseconds per unit value of this field. For
example, if this field represents "seconds", then this returns the
milliseconds in one second.
<p>
For imprecise fields, the unit size is variable, and so this method
returns a suitable average value.
     *
@return the unit size of this field, in milliseconds
@see #isPrecise()

 public abstract int getValue(long duration):
 Get the value of this field from the milliseconds, which is approximate
 if this field is imprecise.
      *
 @param duration  the milliseconds to query, which may be negative
 @return the value of the field, in the units of the field, which may be
 negative
 @throws ArithmeticException if the value is too large for an int

public abstract long getValueAsLong(long duration):
Get the value of this field from the milliseconds, which is approximate
if this field is imprecise.
     *
@param duration  the milliseconds to query, which may be negative
@return the value of the field, in the units of the field, which may be
negative

public abstract int getValue(long duration, long instant):
Get the value of this field from the milliseconds relative to an
instant. For precise fields this method produces the same result as for
the single argument get method.
<p>
If the millisecond duration is positive, then the instant is treated as a
"start instant". If negative, the instant is treated as an "end instant".
     *
@param duration  the milliseconds to query, which may be negative
@param instant  the start instant to calculate relative to
@return the value of the field, in the units of the field, which may be
negative
@throws ArithmeticException if the value is too large for an int

public abstract long getValueAsLong(long duration, long instant):
Get the value of this field from the milliseconds relative to an
instant. For precise fields this method produces the same result as for
the single argument get method.
<p>
If the millisecond duration is positive, then the instant is treated as a
"start instant". If negative, the instant is treated as an "end instant".
     *
@param duration  the milliseconds to query, which may be negative
@param instant  the start instant to calculate relative to
@return the value of the field, in the units of the field, which may be
negative

public abstract int getDifference(long minuendInstant, long subtrahendInstant):
Computes the difference between two instants, as measured in the units
of this field. Any fractional units are dropped from the result. Calling
getDifference reverses the effect of calling add. In the following code:
     *
<pre>
long instant = ...
int v = ...
int age = getDifference(add(instant, v), instant);
</pre>
     *
The value 'age' is the same as the value 'v'.
     *
@param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
subtract from
@param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
subtract off the minuend
@return the difference in the units of this field