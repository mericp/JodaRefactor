Internal interface for parsing textual representations of datetimes.
 * <p>
 * This has been separated from {@link DateTimeParser} to change to using
 * {@code CharSequence}.

int estimateParsedLength():
Returns the expected maximum number of characters consumed.
     * The actual amount should rarely exceed this estimate.
     *
     * @return the estimated length

int parseInto(DateTimeParserBucket bucket, CharSequence text, int position):
Parse an element from the given text, saving any fields into the given
     * DateTimeParserBucket. If the parse succeeds, the return value is the new
     * text position. Note that the parse may succeed without fully reading the
     * text.
     * <p>
     * If it fails, the return value is negative. To determine the position
     * where the parse failed, apply the one's complement operator (~) on the
     * return value.
     *
     * @param bucket  misc.field are saved into this, not null
     * @param text  the text to parse, not null
     * @param position  position to start parsing from
     * @return new position, negative value means parse failed -
     *  apply complement operator (~) to get position of failure
     * @throws IllegalArgumentException if any misc.field is out of range